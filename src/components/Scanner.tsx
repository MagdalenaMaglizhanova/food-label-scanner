import React, { useState } from "react";

const Scanner: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [result, setResult] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  const API_URL = import.meta.env.VITE_API_URL;
  console.log("üöÄ API_URL =", API_URL); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ env –µ –ø—Ä–∞–≤–∏–ª–Ω–æ

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      console.log("üìé –ò–∑–±—Ä–∞–Ω —Ñ–∞–π–ª:", selectedFile);

      setFile(selectedFile);

      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(selectedFile);

      setResult(null);
      setError(null);
    }
  };

  const handleScan = async () => {
    if (!file) {
      console.warn("‚ö†Ô∏è –û–ø–∏—Ç –∑–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –±–µ–∑ –∏–∑–±—Ä–∞–Ω —Ñ–∞–π–ª!");
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    const formData = new FormData();
    formData.append("file", file);

    console.log("üì§ –ò–∑–ø—Ä–∞—â–∞–º –∑–∞—è–≤–∫–∞ –∫—ä–º:", `${API_URL}/scanner/scan`);
    console.log("üì¶ FormData —Å—ä–¥—ä—Ä–∂–∞:", formData.get("file"));

    try {
      const response = await fetch(`${API_URL}/scanner/scan`, {
        method: "POST",
        body: formData,
      });

      console.log("üì• –û—Ç–≥–æ–≤–æ—Ä –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞ (raw):", response);

      if (!response.ok) {
        throw new Error(`–ì—Ä–µ—à–∫–∞ –≤ —Å—ä—Ä–≤—ä—Ä–∞: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ JSON –æ—Ç–≥–æ–≤–æ—Ä:", data);

      setResult(data.report || "–ù—è–º–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ç–µ–∫—Å—Ç");
    } catch (err: unknown) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ fetch:", err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="scanner-container">
      <div className="scanner-card">
        <h2 className="scanner-title">
          <i className="fas fa-camera"></i> –ó–∞—Å–∏—á–∞–Ω–µ –Ω–∞ –≤—Ä–µ–¥–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏
        </h2>
        <p className="scanner-description">
          –ö–∞—á–µ—Ç–µ —Å–Ω–∏–º–∫–∞ –Ω–∞ –µ—Ç–∏–∫–µ—Ç –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –∏ –Ω–∏–µ —â–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å—ä—Å—Ç–∞–≤–∫–∏—Ç–µ –∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–æ –≤—Ä–µ–¥–Ω–∏ –≤–µ—â–µ—Å—Ç–≤–∞.
        </p>

        <div className="scanner-upload-area">
          <label htmlFor="file-upload" className="file-upload-label">
            <div className="upload-content">
              <i className="fas fa-cloud-upload-alt"></i>
              <p>{file ? file.name : "–ò–∑–±–µ—Ä–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}</p>
            </div>
            <input
              id="file-upload"
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="file-input"
            />
          </label>

          {imagePreview && (
            <div className="image-preview">
              <img src={imagePreview} alt="Preview" />
            </div>
          )}
        </div>

        <button
          onClick={handleScan}
          disabled={loading || !file}
          className="scan-button"
        >
          {loading ? (
            <>
              <i className="fas fa-spinner fa-spin"></i> –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ...
            </>
          ) : (
            <>
              <i className="fas fa-search"></i> –°–∫–∞–Ω–∏—Ä–∞–π
            </>
          )}
        </button>

        {error && (
          <div className="error-message">
            <i className="fas fa-exclamation-circle"></i>
            <p>{error}</p>
          </div>
        )}

        {result && (
          <div className="result-container">
            <h3 className="result-title">
              <i className="fas fa-file-alt"></i> –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –∞–Ω–∞–ª–∏–∑–∞:
            </h3>
            <div className="result-content">
              {result.split("\n").map((line, index) => (
                <p key={index} className="result-line">
                  {line}
                </p>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Scanner;
